//BRUNO GUILHERME LUNARDI//IAN MARCELO TOBAR//RUAN MICHEL ADABOpackage limite;import controle.ControleCorretor;import java.awt.BorderLayout;import java.awt.Dimension;import java.awt.GridLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import javax.swing.*;import modelo.Corretor;import modelo.CorretorComissionado;import modelo.CorretorContratado;public class LimiteCorretor extends JFrame implements ActionListener {//abre classe LimiteCorretor    //controlador    ControleCorretor ctrCorretor;    //declaração dos JTextField Corretor Contratado    private JTextField tfNomeContratado;    private JTextField tfCreciContratado;    private JTextField tfSalario;    //declaração dos JTextField Corretor Comissionado    private JTextField tfNomeComissionados;    private JTextField tfCreciComissionado;    private JTextField tfComissao;    //declaração dos JLabel Corretor Contratado    private JLabel lbNomeContratado;    private JLabel lbCreciContratado;    //declaração dos JLabel Corretor Comissionado    private JLabel lbNomeComissionados;    private JLabel lbCreciComissionado;    private JLabel lbSalario;    private JLabel lbComissao;    //declaração dos botões    private JButton btCadastrar;    private JButton btCadastrarComissionado;    //declaração do JTabbedPane    private JTabbedPane tab;    //variaveis dos corretores    private String pNome;    private int pCreci;    private double pSalario;    Calendar pData;    double pComissao;    //index do radio button    int index = -1;    //variavel para verificar qual tab foi selecionada (0 - corretor contratado, 1 - comissionado)    int indexTab = 0;    //construtor    public LimiteCorretor(ControleCorretor ctrCorretor) {//abre construtor 01        this.ctrCorretor = ctrCorretor;    }//fecha construtor 01    public void cadastraCorretor() {        JFrame frCadastra = new JFrame();        //criação dos objetos        tfNomeContratado = new JTextField(20);        tfNomeComissionados = new JTextField(20);        tfCreciContratado = new JTextField(20);        tfCreciComissionado = new JTextField(20);        tfSalario = new JTextField(20);        tfComissao = new JTextField(10);        btCadastrar = new JButton("Cadastrar");        btCadastrarComissionado = new JButton("Cadastrar");        lbCreciContratado = new JLabel("Digite o Creci");        lbCreciComissionado = new JLabel("Digite o Creci");        lbNomeContratado = new JLabel("Digite o nome do corretor");        lbNomeComissionados = new JLabel("Digite o nome do corretor");        lbSalario = new JLabel("Digite o salario do corretor");        lbComissao = new JLabel("Comissão");        tab = new JTabbedPane();        btCadastrar.addActionListener(this);//adiciona listener no botão        btCadastrarComissionado.addActionListener(this);//adiciona listener no botão        //criação do painel p1 (painel pra corretor contratado)        JPanel p1 = new JPanel();        //painel para corretores comissionados        JPanel p2 = new JPanel();        //adiciona os objetos ao painel p1 (contratado)        p1.add(lbNomeContratado);        p1.add(tfNomeContratado);        p1.add(lbCreciContratado);        p1.add(tfCreciContratado);        p1.add(lbSalario);        p1.add(tfSalario);        p1.add(btCadastrar);        p2.add(lbNomeComissionados);        p2.add(tfNomeComissionados);        p2.add(lbCreciComissionado);        p2.add(tfCreciComissionado);        p2.add(lbComissao);        p2.add(tfComissao);        p2.add(btCadastrarComissionado);        //seta layout dos paineis        p1.setLayout(new GridLayout(7, 2));        p2.setLayout(new GridLayout(7, 2));        //adiciona JTabbedPane dos corretores contratados        tab.addTab("Contratado", null, p1, "Cadastra Corretor Contratado");//titulo, icone, painel, ajuda        tab.addTab("Comissionado", null, p2, "Cadastra Corretor Comissionado");//titulo, icone, painel, ajuda        //adiciona listener na JTabbedPane tab, para saber qual painel está selecionado        tab.addChangeListener(new javax.swing.event.ChangeListener() {            public void stateChanged(javax.swing.event.ChangeEvent evt) {                System.out.println(tab.getSelectedIndex());                indexTab = tab.getSelectedIndex();//atribui o index do painel selecionado no JTabbedPane            }        });        frCadastra.add(tab);//adiciona o painel nesta janela        frCadastra.pack();//empacota tudo que está no painel JPane        frCadastra.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);//fecha o programa        frCadastra.setSize(500, 500);//define tamanho da janela        frCadastra.setVisible(true);//torna a janela visivel          }    public void listaCorretores() {//abre listaCorretores        JFrame frConsultar = new JFrame();        frConsultar.setSize(800, 600);        JPanel pMain = new JPanel();//Painel principal        JPanel pLabel = new JPanel();//Painel para Armazenar o label inicial        JPanel pButtons = new JPanel();//Painel pra guardar os botÃµes de Editar, Excluir e Cadastrar        //pMain especificações        pMain.setLayout(null);        //pLabel especificações        pLabel.setLayout(new BorderLayout());        pLabel.add(new JLabel("LISTA DE CORRETORES"), BorderLayout.CENTER);        //pButtons especificações        pButtons.setLayout(new GridLayout(1, 3, 5, 0));        //Adição dos botões        JButton bCadastrar = new JButton("Cadastrar Novo Corretor");        JButton bEditar = new JButton("Editar Corretor");        JButton bExcluir = new JButton("Excluir Corretor");        bCadastrar.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                frConsultar.dispose();                cadastraCorretor();            }        });        bEditar.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                frConsultar.dispose();                editaCorretor(index);            }        });        bExcluir.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                frConsultar.dispose();                try{                    ctrCorretor.excluiCorretor(index);                    JOptionPane.showMessageDialog(null, "Corretor Removido com Sucesso!");                }                catch(Exception ex){                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro ao gravar arquivo", JOptionPane.ERROR_MESSAGE);                }                listaCorretores();            }        });        pButtons.add(bCadastrar);        pButtons.add(bEditar);        pButtons.add(bExcluir);        ArrayList<String> lista = ctrCorretor.listaCorretor();        JPanel pLista = new JPanel();        pLista.setLayout(new BoxLayout(pLista, BoxLayout.Y_AXIS));        pLista.add(pLabel);        pLista.add(pButtons);        ButtonGroup grp = new ButtonGroup();        int i = 1;        int y = 110;        if (lista.size() != 0) {            for (String s : lista) {                JRadioButton rb = new JRadioButton(String.valueOf(i));                pLista.setBounds(0, y, 50, 100);                rb.setBounds(0, y, 50, 50);                rb.addItemListener(new ItemListener() {                    @Override                    public void itemStateChanged(ItemEvent e) {                        JToggleButton button = (JToggleButton) e.getSource();                        if (e.getStateChange() == ItemEvent.SELECTED) {                            index = Integer.parseInt(button.getText()) - 1;                        }                    }                });                grp.add(rb);                pLista.add(rb);                JTextArea text = new JTextArea(s);                text.setBounds(50, y, 500, 100);                pLista.add(text);                i++;                y += 110;            }        }        pLabel.setBounds(0, 0, 500, 50);        pButtons.setBounds(0, 50, 500, 50);        //pLista.setPreferredSize(new Dimension(500, 600));        JScrollPane scroll = new JScrollPane(pLista, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);        frConsultar.setPreferredSize(new Dimension(550, 600));        frConsultar.setLayout(new BorderLayout());        frConsultar.add(scroll, BorderLayout.CENTER);        frConsultar.pack();        //frConsultar.getContentPane().add(scroll);        frConsultar.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);        frConsultar.setVisible(true);    }//fecha listaCorretores    public void editaCorretor(int index) {//abre editaCorretor        //Inicializa Tela        JFrame frEdita = new JFrame();        //Inicializa Painel        JPanel pEdita = new JPanel();        //declara objetos para corretor comissionado        JTextField tfNome = new JTextField();        JTextField tfComissao = new JTextField();        //declara objetos para corretor contratado        JTextField tfCreciContratado = new JTextField();        JTextField tfNomeContratado = new JTextField();        JTextField tfSalario = new JTextField();        //labels para comissionado        JLabel lbLogo = new JLabel("DADOS DO CORRETOR");        JLabel lbNome = new JLabel();        JLabel lbComissao = new JLabel("COMISSÃO:");        //labels para contratados        JLabel lbLogoContratado = new JLabel("DADOS DO CORRETOR");        JLabel lbCreciContratado = new JLabel();        JLabel lbNomeContratado = new JLabel();        JLabel lbSalario = new JLabel("Salário:");        //pega o corretor que foi selecionado para edição, através do index do radioButton        Corretor i = ctrCorretor.getListaCorretor().get(index);        //verifica o tipo de corretor        if (i instanceof CorretorComissionado) {//abre if 01            //converte i para Comissionado            CorretorComissionado auxComissionado = (CorretorComissionado) i;            //Inicializa TextFields             //pega valor da atual comissao e apresenta no JTextField            tfComissao.setText(String.valueOf(auxComissionado.getaComissao()));            lbNome.setText(auxComissionado.getaNome());//seta o JLabel para o nome do corretor            //-Posições dos elementos-//            //posiciona rotulos (int x, int y, int width, height)            lbLogo.setBounds(200, 0, 500, 25);            lbNome.setBounds(0, 50, 500, 25);            lbComissao.setBounds(0, 80, 500, 25);            //posiciona campos textos (int x, int y, int width, height)            tfComissao.setBounds(0, 115, 500, 25);        } else {//abre else do if 01            //converte para contratado            CorretorContratado auxContratado = (CorretorContratado) i;            //Inicializa TextFields             //pega valor do atual salario e apresenta no JTextField            tfSalario.setText(String.valueOf(auxContratado.getaSalarioFixo()));            lbNomeContratado.setText(auxContratado.getaNome());//nome do corretor no JLabel            //posiciona rotulos (int x, int y, int width, height)            lbLogoContratado.setBounds(200, 0, 500, 25);            lbNomeContratado.setBounds(0, 50, 500, 25);            lbSalario.setBounds(0, 80, 500, 25);            //posiciona campos textos (int x, int y, int width, height)            tfSalario.setBounds(0, 115, 500, 25);        }//fecha else do if 01        //Inicializa BotÃµes        JButton btSubmit = new JButton("Cadastrar");        JButton btCancelar = new JButton("Cancelar");        pEdita.setLayout(null);//layout NULL        //Listener dos botÃµes        btSubmit.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                //verifica se é um corretor comissionado                if (i instanceof CorretorComissionado) {                    if (tfComissao.getText().equals("")) {                        JOptionPane.showMessageDialog(null, "Digite um valor para a comissão", "Error!", JOptionPane.ERROR_MESSAGE);                    }                    //else if (Double.parseDouble(tfComissao.getText()) < 1 || Double.parseDouble(tfComissao.getText()) > 3) {                    //                    JOptionPane.showMessageDialog(null, "O valor da comissão deve ser entre 1 e 3%", "Error!", JOptionPane.ERROR_MESSAGE);                    //                  } else {                    CorretorComissionado auxComissionado = (CorretorComissionado) i;                    try {                        auxComissionado.setaComissao(Double.parseDouble(tfComissao.getText()));                    } catch (Exception ex) {                        JOptionPane.showMessageDialog(null, ex);                    }                    //chamametodo para editar corretor, passando o corretor e o index do mesmo                    ctrCorretor.editaCorretor(index, auxComissionado);                    frEdita.dispose();//fecha janela                    listaCorretores();//chama listaCorretores//                    }                } else {                    if (tfSalario.getText().equals("")) {                        JOptionPane.showMessageDialog(null, "Digite um valor para o Salário", "Error!", JOptionPane.ERROR_MESSAGE);                    } else if (Double.parseDouble(tfSalario.getText()) < 0.0) {                        JOptionPane.showMessageDialog(null, "O valor do salário deve ser maior que zero!", "Error!", JOptionPane.ERROR_MESSAGE);                    } else {                        CorretorContratado auxContratado = (CorretorContratado) i;                        try {                            auxContratado.setaSalarioFixo(Double.parseDouble(tfSalario.getText()));                        } catch (Exception ex) {                            JOptionPane.showMessageDialog(null, ex);                        }                        //chamametodo para editar corretor, passando o corretor e o index do mesmo                        ctrCorretor.editaCorretor(index, auxContratado);                        frEdita.dispose();//fecha janela                        listaCorretores();//chama listaCorretores                    }                }            }        });        //ação para o botão cancelar, do edita corretor        btCancelar.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                frEdita.dispose();//fecha janela                listaCorretores();//chama janela listaCorretores            }        });        //define tamanho e posicionamento dos botões (int x, int y, int width, int height)        btSubmit.setBounds(200, 375, 100, 25);        btCancelar.setBounds(200, 425, 100, 25);        //-Adição dos elementos no painel-//        //JTextField para contratado        pEdita.add(tfSalario);        //JLabel para contratado        pEdita.add(lbLogoContratado);        pEdita.add(lbNomeContratado);        pEdita.add(lbSalario);        //JLabel para comissionado        pEdita.add(lbLogo);        pEdita.add(lbNome);        pEdita.add(lbComissao);        //JTextFiel para comissionado        pEdita.add(tfComissao);        //adiciona botões        pEdita.add(btSubmit);        pEdita.add(btCancelar);        //Ajustes no frame        frEdita.setSize(500, 500);//tamanho        frEdita.getContentPane().add(pEdita);//adiciona painel        frEdita.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);//esconde janela        frEdita.setVisible(true);//torna a janela visivel    }//fecha editaCorretor    @Override    public void actionPerformed(ActionEvent ae) {//abre actionPerformed        if ((ae.getSource() == btCadastrar) && (indexTab == 0)) {//abre if 01            //chama metodo insereContratado da classe ControleCorretor            try {                //atribui valores para as variaveis                pNome = tfNomeContratado.getText();                pCreci = Integer.parseInt(tfCreciContratado.getText());                pSalario = Double.parseDouble(tfSalario.getText());                             pData = Calendar.getInstance();                                ctrCorretor.insereContratado(pNome, pCreci, pSalario, pData);                JOptionPane.showMessageDialog(null, "Corretor contratado inserido com sucesso!!!");//mensagem de confirmação                //limpa os campos                tfNomeContratado.setText("");                tfCreciContratado.setText("");                tfSalario.setText("");                tfComissao.setText("");            } catch (Exception ex) {                JOptionPane.showMessageDialog(null, ex);            }        }//fecha if 01        else {//abre else do if 01            //pega os valores que foram digitados nos JTextFields            try {                pNome = tfNomeComissionados.getText();                pCreci = Integer.parseInt(tfCreciComissionado.getText());                pComissao = Double.parseDouble(tfComissao.getText());                //chama metodo insereComissionado da classe ControleCorretor                ctrCorretor.insereComissionado(pNome, pCreci, pComissao);                JOptionPane.showMessageDialog(null, "Corretor comissionado inserido com sucesso!!!");//mensagem de confirmação                //limpa os campos                tfNomeComissionados.setText("");                tfCreciComissionado.setText("");                tfComissao.setText("");            } catch (Exception ex) {                JOptionPane.showMessageDialog(null, ex);            }        }//fecha else do if 01    }//fecha actionPerformed}//fecha classe LimiteCorretor