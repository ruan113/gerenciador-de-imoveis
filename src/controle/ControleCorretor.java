package controle;import Model.*;import controle.*;import limite.*;import java.io.*;import java.util.*;import javax.swing.*;public class ControleCorretor {    public ControlePrincipal ctrPrincipal;    public LimiteCorretor lmtCorretor;//variavel de instancia responsavel pelo limite dos corretores    private ArrayList<Corretor> listaCorretor = new ArrayList<Corretor>();//array para Corretor    //construtor    public ControleCorretor(ControlePrincipal ctrPrincipal) {        this.ctrPrincipal = ctrPrincipal;        lmtCorretor = new LimiteCorretor(this);        //new LimiteCorretor(this);        try {            this.desserializaCorretor();        } catch (Exception e) {            JOptionPane.showMessageDialog(null, e.getMessage(),                    "Erro ao abrir arquivo", JOptionPane.ERROR_MESSAGE);        }    }    //metodo para inserir corretor     public void insereCorretor(String cpf, String nome, String email,            String fone, String creci, double percCorretagem) throws Exception {        //cria um obejto do modelo CorretorContratado e aciona o seu construtor        Corretor corretor = new Corretor(                cpf,                nome,                email,                fone,                creci,                percCorretagem);//cria objeto contratado        this.listaCorretor.add(corretor);//adiciona o contratado no array list de corretor        //grava em arquivo o corretor inserido        try {            this.serializaCorretor();            JOptionPane.showMessageDialog(null, "Corretor cadastrado com sucesso!!!");        } catch (Exception e) {            JOptionPane.showMessageDialog(null, e.getMessage(), "Erro ao gravar arquivo", JOptionPane.ERROR_MESSAGE);        }    }    public void editaCorretor(int index, Corretor i) {        this.listaCorretor.remove(index);        this.listaCorretor.add(index, i);        //Grava edição em arquivo        try {            JOptionPane.showMessageDialog(null, "Corretor editado com sucesso!!!");//mensagem de confirmação            this.serializaCorretor();        } catch (Exception e) {            JOptionPane.showMessageDialog(null, e.getMessage(), "Erro ao gravar arquivo", JOptionPane.ERROR_MESSAGE);        }    }    public void excluiCorretor(int index) throws Exception {        if ((index >= 0) && (getListaAll().size() > 0)) {            //remove elemento da lista, através do indice passado pelo LimiteListaCorretor.java            getListaAll().remove(index);            //grava remoção no arquivo            try {                this.serializaCorretor();                JOptionPane.showMessageDialog(null, "Corretor removido com sucesso!!!");            } catch (Exception e) {                JOptionPane.showMessageDialog(null, e.getMessage(), "Erro ao gravar arquivo", JOptionPane.ERROR_MESSAGE);            }        } else {            throw new Exception("Operação inválida!!!\nVerifique se foi selecionado algum corretor!!!");        }    }    //metodo para listar os corretoes    public ArrayList<String> getInfoList() {        ArrayList<String> lista = new ArrayList<String>();        String aux;        for (Corretor c : listaCorretor) {            //retorna informações do corretor             aux = "CRECI: " + c.getCreci() + "\nNome: " + c.getNome()                    + "\nCPF: " + c.getCpf()                    + "\nEmail: " + c.getEmail()                    + "\nFone: " + c.getFone()                    + "\nPorcentagem de Corretagem: " + c.getPercCorretagem();            System.out.println(aux);            lista.add(aux);        }        return lista;    }    //GETTERS E SETTERS    public ArrayList<Corretor> getListaAll() {        return this.listaCorretor;    }    public void setListaCorretor(ArrayList<Corretor> listaCorretor) {        listaCorretor = listaCorretor;    }     public Corretor getCorretorByNome(String nome) {        for (Corretor corretor : listaCorretor) {            if (corretor.getNome().equals(nome)) {                return corretor;            }        }        return null;    }         //metodo para serializa a o corretor, para salvar em arquivo    private void serializaCorretor() throws Exception {        //Stream de gravação        FileOutputStream objFileOS = new FileOutputStream("corretores.dat");        //Stream de gravação        ObjectOutputStream objOS = new ObjectOutputStream(objFileOS);        //grava o vetor no arquivo        objOS.writeObject(this.listaCorretor);        //limpa objOS        objOS.flush();        //fecha stream        objOS.close();    }    //metodo para desserializar o arquivo de corretores    private void desserializaCorretor() throws Exception {        //nome do arquivo que será lido        File objFile = new File("corretores.dat");        //se o arquivo existir        if (objFile.exists()) {            //objeto de stream de bytes            FileInputStream objFileIS = new FileInputStream("corretores.dat");            //objeto de stream de bytes            ObjectInputStream objIS = new ObjectInputStream(objFileIS);            //converte o objeto lido do arquivo para o tipo ArrayList e atribui ao Array listaCorretor            this.listaCorretor = (ArrayList<Corretor>) objIS.readObject();            //fecha stream            objIS.close();        }    }}